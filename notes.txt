import { TargetedEvent } from "preact/compat";
import { useCallback, useEffect, useMemo, useReducer, useRef, useState } from "preact/hooks";
import { useNavigate, useParams } from "react-router-dom";
import CompareIcon from '@mui/icons-material/CompareArrows';
import styled from "@mui/system/styled";
import Stack from "@mui/material/Stack";
import { useAppDispatch, useAppSelector } from "../app/hooks";
import { selectCompanyData, selectDrawer, selectFetchingCompany, selectUserDetails } from "../redux/users/user.selectors";
import Portal from "../components/common/portal"
import BoxCard from '../components/ui/stack-cards'
import { entering, leaving } from "../theme/transitions";
import { companyColumns, DRAWER_WIDTH, companyLabels, LOG_STATE } from "../utils/constants";
import { USERS } from "../utils/routes";
import StackDetails from "../components/common/stack-details";
import { Text, TextInput } from '../theme/styles'
import Modal from "../components/common/modal";
import ModalRefObject from "../types/model-ref-object";
import { useApproveComplianceMutation, useDenyComplianceMutation } from "../redux/users/user-api.slice";
import { ApproveType } from "../types/approve-type";
import ActionBtn from '../components/common/custom-button'
import { addLog } from "../redux/logs/log.reducer";
import ApproveModal from "../components/common/approve-modal";
import DenyFormList, { DenyModalOptions } from "../types/deny-form-list";
import Company from "../types/company.type";
import { DenyType } from "../types/deny-type";
import DenyModal from "../components/common/deny-modal";

let company: Company;

const options: Array<DenyModalOptions> = Object.values(companyColumns).map(item => { 
  return {value: item, label: item }
})
const companyIdxArr = Object.keys(companyColumns)

const INITIAL_STATE = { 
  formList: [] as Array<DenyFormList>,
};
type StateType = typeof INITIAL_STATE
type ActionType = {
  type: 'add' | 'remove' | 'clear' | 'update';
  payload: DenyFormList
}

function reducer(state: StateType, action: ActionType) {
  switch (action.type) {
    case 'add':
      return { 
        ...state, 
        formList: [...state.formList, {...action.payload, id: action.payload.id + state?.formList.length} ]
      };
    case 'remove':
      return { 
        ...state, 
        formList: state.formList.filter(item => item.id !== action.payload.id)
      };
    case 'update':
      console.log(action.payload);
      
      const id = action.payload.id
      return { 
        ...state,
        formList: state.formList.map(row => {
          // row.options = action.payload.options
          return row.id === id ? action.payload : row
        })
      };
    case 'clear':
      return INITIAL_STATE;
    default:
      return {...INITIAL_STATE, ...state}
  }
}

const ViewCompliance = () => {
  const [mutate, { isLoading: isApproving }] = useApproveComplianceMutation<{ mutate: ApproveType, isLoading: boolean }>()
  const [mutateDeny, { isLoading }] = useDenyComplianceMutation<{ mutateDeny: DenyType, isLoading: boolean }>()
  const navigate = useNavigate()
  const { userId } = useParams<{ userId: string }>()
  const appDispatch = useAppDispatch()
  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);

  const drawer = useAppSelector(selectDrawer)
  const companyData = useAppSelector(selectCompanyData)
  const isFetchingComppany = useAppSelector(selectFetchingCompany);
  const userData = useAppSelector(selectUserDetails)

  const modalRef = useRef<ModalRefObject>(null);
  const inputRef = useRef<HTMLInputElement>(null)

  const [open, setOpen] = useState(false);  
  const [isApprovalModal, setIsApprovalModal] = useState(false)
  const [inputValues, setInputValues] = useState({})
  const [selectedFields, setSelectedFields] = useState({})
  const [optnsNames, setOptnsNames] = useState(options);
  
  const handleInput = useCallback((e: any, idx: number) => {
    const { value } = e.target
    const name = state.formList[idx].name as keyof typeof company
    setInputValues(prev => ({ ...prev, [name]: value }))
  }, [state.formList])
  
  const handleSelect = useCallback((e: any, idx: number) => {
    const { label, value } = e
    setSelectedFields(prev => {
      const fields = { ...prev, [label]: value };      
      dispatch({ type: 'update', payload: {
        id: idx+1, 
        options, 
        name: value,
      }})
      return fields
    })
  }, [])

  const handleDelete = useCallback((item: DenyFormList, idx: number) => {    
    dispatch({ type: 'remove', payload: item })
    setOptnsNames(prev => {
      const arr = Object.values(companyColumns)
      const items = prev.slice()
      const itemName = item?.name ?? ''
      const itemIdx = arr.indexOf(itemName);
      
      items.splice(itemIdx, 0, { value: itemName, label: itemName})
      dispatch({ type: 'update', payload: {
        id: idx+1, 
        options: items, 
      }})
      return items
    })   
  }, [dispatch])
  
  const listObj = useMemo(() => ({
    id: 1,
    options: optnsNames,
    name: '' as keyof typeof company,
  }), [optnsNames])    

  const handleExit = useCallback((e: TargetedEvent<any, Event>) => {
    e.preventDefault();
    e.stopPropagation()
    navigate(`${USERS}/${userId}`)
    setOpen(false)
  }, [open, navigate, userId])

  const preventExit = (e: TargetedEvent<any, Event>) => {
    e.stopPropagation()
  }

  useEffect(() => {
    if (!open) setOpen(true)
  }, [open])

  useEffect(() => {
    return () => setOpen(false)
  }, [])  

  const openApprovalModal = (e: TargetedEvent<any, Event>) => {
    e.preventDefault()
    e.stopPropagation()
    setIsApprovalModal(true)
    modalRef.current?.openDialog()
  }

  const openDenyModal = (e: TargetedEvent<any, Event>) => {
    e.preventDefault()
    e.stopPropagation()
    setIsApprovalModal(false)
    modalRef.current?.openDialog()
  }

  const handleApproval = useCallback(async (e: TargetedEvent<any, Event>) => {
    e.preventDefault()
    e.stopPropagation()
    try {
      if (userId && inputRef.current?.value) {
        const payload = await mutate({ 
          userId: userId,
          email: inputRef.current?.value
        })
      } else {
        LOG_STATE.msg = 'Email can not be blank'
        LOG_STATE.location = 'View compliance'
        appDispatch(addLog(LOG_STATE))
      }
    } catch (e) {
        console.log(e)
    }
  }, [userId, inputRef, appDispatch])

  const handleModalExit = () => {
    let formArr: DenyFormList
    dispatch({ type: 'clear', payload: {} as typeof formArr })
  }

  console.log(state.formList, selectedFields);

  const handleDeny = useCallback(async (e: TargetedEvent<any, Event>) => {
    e.preventDefault()
    e.stopPropagation()
    console.log(selectedFields, inputValues);
    
    // try {
    //   if (userId && state.formList) {
    //     const body = state.formList.map(item => {
    //       return {
    //         [item.selectValue.]
    //       }
    //     })
    //     const payload = await mutateDeny({ 
    //       userId: userId,
    //       body: [],
    //     })
    //   } else {
    //     LOG_STATE.msg = 'Email can not be blank'
    //     LOG_STATE.location = 'View compliance'
    //     appDispatch(addLog(LOG_STATE))
    //   }
    // } catch (e) {
    //     console.log(e)
    // }
  }, [selectedFields, inputValues]) 
  
  const addErrors = useCallback(() => {
    dispatch({ type: 'add', payload: listObj })
  }, [listObj, dispatch])

  const RenderModal = useMemo(() => 
    isApprovalModal ? 
    <ApproveModal 
      isLoading={isApproving} 
      handleApproval={handleApproval}
      inputRef={inputRef}
    /> : 
    <DenyModal 
      handleDeny={handleDeny} 
      formList={state.formList} 
      isLoading={isLoading}
      addErrors={addErrors}
      handleSelect={handleSelect}
      handleInput={handleInput}
      handleDelete={handleDelete}
      selectedValue={selectedFields  as typeof company}
      inputValue={inputValues  as typeof company}
    />
  , [isApprovalModal, isApproving, inputRef, handleApproval, handleDeny, state.formList, isLoading])
  
  return (
    <Portal isOpen={open} handleClick={handleExit}>
      <Stack direction="row" alignItems="center" mt={9} spacing={2}>
        <StackCard onClick={preventExit} drawer={drawer}>
          <Text fsz={30} fw={600} mt={1} mb={1} ml={3}>Company Info</Text>
          <StackDetails 
            idxArr={companyIdxArr} 
            labels={companyLabels} 
            details={companyData} 
            columns={companyColumns} 
            loading={isFetchingComppany}
            sx={{ height: 'max-content', width: '95%', maxWidth: '95%' }}
          />
        </StackCard>
        <Stack alignItems="center" onClick={preventExit}>
          <ActionBtn onClick={openApprovalModal} disabled={userData?.hasComplianceApproved} btnname="Approve" />
          <CompareIcon color="inherit" fontSize="large" />
          <ActionBtn btnname="Deny" onClick={openDenyModal} />
        </Stack>
        <StackCard onClick={preventExit} drawer={drawer} loading={0}>
          <Text fsz={30} fw={600} mt={1} mb={1} ml={3}>Company Info</Text>
          <StackDetails 
              idxArr={companyIdxArr} 
              labels={companyLabels} 
              details={companyData} 
              columns={companyColumns} 
              loading={isFetchingComppany}
              sx={{ height: 'max-content', width: '95%', maxWidth: '95%' }}
            />
        </StackCard>
      </Stack>
      <Modal ref={modalRef} onClose={handleModalExit}>
        {RenderModal}
      </Modal>
    </Portal>
  )
}

const StackCard = styled(BoxCard, 
  { shouldForwardProp: (prop: string) => prop !== 'drawer' })(
  ({ theme, drawer, loading }) => ({
    ...(!loading && {     
      ...entering(theme, 'width')
    }),
    overflowX: 'hidden',
    overflowY: 'auto',
    height: 600,
    maxHeight: 600,
    width: 450,
    maxWidth: 450,
    position: 'relative',
    ...(drawer && {
      ...entering(theme, 'margin-left'),
      marginLeft: loading ?? DRAWER_WIDTH
    }),
    ...(!drawer && {
      ...leaving(theme, 'margin-left'),
      marginLeft: 0
    })
}))

export default ViewCompliance